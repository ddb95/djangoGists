1. Create Model from Existing table in DB
    You can generate the model of a single table, running this command
    python manage.py inspectdb TableName > output.py

2. Multiple Tables
    python manage.py inspectdb table1 table2 tableN > output.py

3. Distinct values from a column in a table inside a DB
    # Get Data
    queryset = DeMeMasterData.objects.all()
    # Serialize
    serializer_class = sc.GetSimulatorInputDataSerializer
    # request type
    @action(methods=['post'], detail=True)
    # request method
    def getData(self, *args, **kwargs):
        level = self.request.data['level']
        if level=='Retailer':
            retailersList = []
            retailerValues = list(self.queryset.order_by('ext_o_customer_name_internal').values('ext_o_customer_name_internal').distinct())
            for items in retailerValues:
                retailersList.append(items['ext_o_customer_name_internal'])
            retailersList = [i for i in retailersList if i]
            return Response(retailersList, status=status.HTTP_200_OK)

4. Django queryset as JSON Response
    a.  data = list(queryset.values())
        return JsonResponse(data, safe=False)

    b. def get(self, request, *args, **kwargs):
            qs = User.objects.all()
            data = serialize("json", qs)
            return JsonResponse(data)

5. Key-Value from dictionary 
dividends=[
    {"2005":0.18},
    {"2006":0.21},
    {"2007":0.26},
    {"2008":0.31},
    {"2009":0.34},
    {"2010":0.38},
    {"2011":0.38},
    {"2012":0.38},
    {"2013":0.38},
    {"2014":0.415},
    {"2015":0.427}
    ]
    l1 = [d.values()[0] for d in dividends]
    # ['2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']

    l2 = [d.keys()[0] for d in dividends]
    # [0.18, 0.21, 0.26, 0.31, 0.34, 0.38, 0.38, 0.38, 0.38, 0.415, 0.427]

6. How to concatenate multiple column values into a single column in Pandas dataframe
    cols = ['foo', 'bar', 'new']
    df['combined'] = df[cols].apply(lambda row: '_'.join(row.values.astype(str)), axis=1)
    df['combined']=df['bar'].astype(str)+'_'+df['foo']+'_'+df['new']

7. Convert to strings a column in df
    total_rows['ColumnID'] = total_rows['ColumnID'].astype(str)

8. Get list from pandas dataframe column or row
    unique_arr = df["cluster"].unique()

    OR 

    arr = df["cluster"].to_numpy()
    unique_arr = np.unique(arr)

9. Django queryset filter by array
    if (("brandName" in data) & (len(data["brandName"]) != 0)):
            self.queryset = self.queryset.filter(ext_o_local_brand__in=data["brandName"])
            print(self.queryset.count())

10. Using Concat as an annotation function
    from django.db.models import Value
    from django.db.models.functions import Concat
    queryset = Item.objects.annotate(search_name=Concat('series', Value(' '), 'number'))
    # then you can filter:
    queryset.filter(search_name__icontains='whatever text')

    from django.db.models import CharField, Value
    from django.db.models.functions import Concat
    # then you can filter:
    query = DataTable.objects.annotate(C=Concat('A', Value('-'), 'B', output_field=CharField())


11. How to get all values for a certain field in django ORM?
    user_info.objects.values_list('name', flat=True).distinct()

12. 